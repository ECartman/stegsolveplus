/* 
 * Copyright Â© 2024 Eduardo Vindas. All rights reserved.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.aeongames.stegsolveplus.ui;

import com.aeongames.edi.utils.text.LabelText;

/**
 *
 * @author cartman
 */
public class Footer extends javax.swing.JPanel {

    public enum ProgressState {
        Idle,
        Indetermine,
        Progressing,
        Complete,
        INVALID
    }
    
    private String FullLabelText="Welcome To StegnoSolve+";

    /**
     * Creates new form Footer
     */
    public Footer() {
        initComponents();
    }

    public ProgressState SetProgressIndeterminate() {
        AppProgressBar.setIndeterminate(true);
        return ProgressState.Indetermine;
    }

    public ProgressState SetProgress(int CurrentProgress) {
        if (CurrentProgress >= 0 && CurrentProgress <= 100) {
            AppProgressBar.setIndeterminate(false);
            AppProgressBar.setValue(CurrentProgress);
            ProgressState currentState;
            currentState = switch (CurrentProgress) {
                case 0 -> ProgressState.Idle;
                case 100 -> ProgressState.Complete;
                default /*whatever in between 0-100*/ -> ProgressState.Progressing;
            };
            return currentState;
        }
        if (CurrentProgress == -1) {
            return SetProgressIndeterminate();
        }
        //otherwise invalid... 
        //throw new UnsupportedOperationException("invalid progress");
        return ProgressState.INVALID;
    }

    public void setFooterText(String newText) {
        FullLabelText=newText;
        txtFooter.setToolTipText(FullLabelText);
        txtFooter.setText(LabelText.getTrimmedtoComponentsize(FullLabelText, txtFooter,654));
    }

    /**
     * gets the the current Percent of progress done from the ProgressBar if the
     * ProgressBar is "indeterminate" it returns "-1" otherwise returns the % of
     * completion
     *
     * @return a Integer with -1 if the progress bar is Indeterminate or a value
     * between 0 and 100
     */
    public int getCurrentProgresspercentile() {
        if (AppProgressBar.isIndeterminate()) {
            return -1;
        }
        //for performance we can read directly from the model. but the model should represent a Percent (from 0 to 100) 
        //otherwise we need to calculate the persentile value. 
        if (AppProgressBar.getModel().getMaximum() == 100 && AppProgressBar.getModel().getMinimum() == 0) {
            return AppProgressBar.getModel().getValue();
        } else {
            return (int) (AppProgressBar.getPercentComplete() * 100);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppProgressBar = new javax.swing.JProgressBar();
        txtFooter = new javax.swing.JLabel();

        txtFooter.setText(FullLabelText);
        txtFooter.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                txtFooterComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(txtFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AppProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AppProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFooterComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_txtFooterComponentResized
      txtFooter.setText(LabelText.getTrimmedtoComponentsize(FullLabelText, txtFooter,654));
    }//GEN-LAST:event_txtFooterComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar AppProgressBar;
    private javax.swing.JLabel txtFooter;
    // End of variables declaration//GEN-END:variables
}

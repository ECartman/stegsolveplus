/* 
 * Copyright Â© 2024 Eduardo Vindas. All rights reserved.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.aeongames.stegsolveplus.ui;

import com.aeongames.edi.utils.error.LoggingHelper;
import com.aeongames.edi.utils.visual.ImageScaleComponents;
import com.aeongames.stegsolveplus.StegnoTools.StegnoAnalist;
import java.awt.IllegalComponentStateException;
import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.pushingpixels.radiance.theming.api.skin.RadianceNightShadeLookAndFeel;

/**
 * the Main Windows(frame) for the application. this application is intended to
 * have as few windows as possible and most data to be review within tabs on the
 * Main Windows. with the exceptions of "opening files" and a few particular
 * exceptions.
 *
 * @author Eduardo Vindas
 */
public class MainFrame extends javax.swing.JFrame {

    private int BusyTabs;
    private boolean HackishOpenFile;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        BusyTabs = 0;
        initComponents();
        var image = MainFrame.class.getResource("/com/aeongames/stegsolveplus/ui/OIG3.jpg") == null
                ? null : new javax.swing.ImageIcon(
                        MainFrame.class.getResource("/com/aeongames/stegsolveplus/ui/OIG3.jpg"));
        if (image != null) {
            this.setIconImage(image.getImage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabPane = new com.aeongames.stegsolveplus.ui.JStegnoTabbedPane();
        MainMenu = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        MOpen = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StegnoSolver + (ALPHA)");
        setMinimumSize(new java.awt.Dimension(370, 510));

        MainTabPane.setBackgroundPolicy(ImageScaleComponents.SCALE_ALWAYS);

        FileMenu.setText("File");
        FileMenu.setToolTipText("File Menu");

        MOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/aeongames/stegsolveplus/ui/file_open_20dp_opsz20.png"))); // NOI18N
        MOpen.setText("Open File");
        MOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOpenActionPerformed(evt);
            }
        });
        FileMenu.add(MOpen);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/aeongames/stegsolveplus/ui/link.png"))); // NOI18N
        jMenuItem2.setText("Open Link");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItem2);

        MainMenu.add(FileMenu);

        jMenu2.setText("Actions");

        jMenuItem1.setText("Run Image Study");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        MainMenu.add(jMenu2);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1022, 620));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        var currentTab = MainTabPane.getSelectedComponent();
        if (currentTab instanceof InvestigationTab ITab) {
            ITab.RunAnalist(true);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * trigger by click on Open Action on the Menu bar.
     *
     * @param evt not used
     */
    private void MOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOpenActionPerformed
        MOpen.setEnabled(false);
        if (HackishOpenFile) {
            SetDefOSUI();
        }
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        StringBuilder descriptor = new StringBuilder("Images (");
        var list2 = StegnoAnalist.ValidImagesFiles;
        for (int index = 0; index < list2.length; index++) {
            descriptor.append(list2[index]);
            if (index + 1 < list2.length) {
                descriptor.append(',').append(' ');
            }
        }
        descriptor.append(')');
        fileChooser.setFileFilter(new FileNameExtensionFilter(descriptor.toString(), list2));
        fileChooser.setMultiSelectionEnabled(true);
        int rVal = fileChooser.showOpenDialog(this);
        if (HackishOpenFile) {
            setRadianceUI();
        }
        System.setProperty("user.dir", fileChooser.getCurrentDirectory().getAbsolutePath());
        if (rVal == JFileChooser.APPROVE_OPTION) {
            var selecteddata = fileChooser.getSelectedFiles();
            if (!loadImages(selecteddata)) {
                MOpen.setEnabled(true);
            }
            //TODO remove this reenabled. and only reenable once the task to load is done.
            MOpen.setEnabled(true);
        } else {
            MOpen.setEnabled(true);
        }
    }//GEN-LAST:event_MOpenActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //prompt for a link. 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Checks whenever or not the File can be used. if the file is ready. check
     * if we already have a tab for it. and if we do changes the tab to that
     * particular file
     */
    private boolean loadImages(File[] selecteddata) {
        var loadedTabs = false;
        for (var file : selecteddata) {
            if (file.exists() && file.isFile() && file.canRead()) {
                var pathFile = file.toPath();
                int tabindx;
                if ((tabindx = hasTabforFile(pathFile)) >= 0) {
                    MainTabPane.setSelectedIndex(tabindx);
                    continue;
                }
                InvestigationTab tab = null;
                try {
                    tab = new InvestigationTab(pathFile);
                    BusyTabs++;
                } catch (FileNotFoundException ex) {
                    LoggingHelper.getLogger(MainFrame.class.getName()).log(Level.SEVERE, "File fail to load. while creating the Tab", ex);
                }
                if (tab != null) {
                    MainTabPane.add(tab);
                    loadedTabs = true;// we m,ight want to do something extra here. but this will do for now. 
                }
            }
        }
        return loadedTabs;
    }

    private int hasTabforFile(Path pathFile) {
        for (var index = 0; index < MainTabPane.getTabCount(); index++) {
            if (MainTabPane.getComponentAt(index) instanceof InvestigationTab tab) {
                if (tab.IsAnalizing(pathFile)) {
                    return index;
                }
            }
        }
        return -1;
    }

    private void SetDefOSUI() {
        this.setVisible(false);
        dispose();
        trySetLaFByName(UIManager.getSystemLookAndFeelClassName());
        javax.swing.SwingUtilities.updateComponentTreeUI(this);
        if (!UIManager.getLookAndFeel().getSupportsWindowDecorations()) {
            try {
                setUndecorated(false);
            } catch (IllegalComponentStateException err) {
            }
            try {
                getRootPane().setWindowDecorationStyle(JRootPane.NONE);
            } catch (IllegalComponentStateException err) {
            }
        }
        this.revalidate();
        // this.setVisible(true);
    }

    private void setRadianceUI() {
        this.setVisible(false);
        dispose();
        trySetLaFByName(RadianceNightShadeLookAndFeel.class.getName());
        javax.swing.SwingUtilities.updateComponentTreeUI(this);
        if (!UIManager.getLookAndFeel().getSupportsWindowDecorations()) {
            try {
                setUndecorated(false);
            } catch (IllegalComponentStateException err) {
            }
            try {
                getRootPane().setWindowDecorationStyle(JRootPane.NONE);
            } catch (IllegalComponentStateException err) {
            }
        } else {
            setUndecorated(true);
            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        }
        this.revalidate();
        this.setVisible(true);
    }

    // <editor-fold defaultstate="collapsed" desc="Start Up Functions">
    /**
     * Initialize the LAF for the application. this function needs to be called
     * on the EDT
     */
    private static void InitLAF() {
        String LaFName = RadianceNightShadeLookAndFeel.class.getName();
        if (!trySetLaFByName(LaFName)) {
            trySetLaFByName(UIManager.getSystemLookAndFeelClassName());
        }
    }

    private static boolean trySetLaFByName(String Name) {
        var result = false;
        try {
            UIManager.setLookAndFeel(Name);
            result = true;
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            //unable to set the UI LAF we could try just allowing the defaults. 
            LoggingHelper.getLogger(MainFrame.class.getName()).log(Level.SEVERE, "Unable to setup the UI LaF", e);
        }

        if (UIManager.getLookAndFeel().getSupportsWindowDecorations()) {
            JFrame.setDefaultLookAndFeelDecorated(true);
            javax.swing.JDialog.setDefaultLookAndFeelDecorated(true);
        } else {
            JFrame.setDefaultLookAndFeelDecorated(false);
            javax.swing.JDialog.setDefaultLookAndFeelDecorated(false);
        }
        return result;
    }

    private static void ParseParams(String[] params) {
        //TODO: Implement
    }

    /**
     * Launches the Application.
     *
     * @param args The Console parameters for this application. TODO use the
     * arguments someway.
     *
     */
    public static void main(String[] args) {
        ParseParams(args);
        SwingUtilities.invokeLater(() -> {
            InitLAF();
            try {
                MainFrame frame = new MainFrame();
                frame.setVisible(true);
            } catch (Exception e) {
                //log the error
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, e);
                throw e;
            }
        });
    }
    // </editor-fold>  

    // <editor-fold defaultstate="collapsed" desc="UI components">    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem MOpen;
    private javax.swing.JMenuBar MainMenu;
    private com.aeongames.stegsolveplus.ui.JStegnoTabbedPane MainTabPane;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>  

}
